apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: it-messaging-service-staging
  annotations:
    run.googleapis.com/ingress: all
spec:
  template:
    metadata:
      annotations:
        run.googleapis.com/cloudsql-instances: "YOUR_PROJECT_ID:YOUR_REGION:YOUR_INSTANCE_ID"
        autoscaling.knative.dev/maxScale: "10"
        autoscaling.knative.dev/minScale: "1"
        run.googleapis.com/cpu-throttling: "false"
        run.googleapis.com/execution-environment: gen2
    spec:
      containerConcurrency: 100
      timeoutSeconds: 300
      containers:
      - image: gcr.io/PROJECT_ID/it-messaging-service:latest # This will be replaced by the build script
        ports:
        - containerPort: 8080
        env:
        - name: ENVIRONMENT
          value: "test"
        - name: LOG_LEVEL
          value: "info"
        - name: DB_HOST
          # The value is the path to the socket for the Cloud SQL instance.
          value: "/cloudsql/YOUR_PROJECT_ID:YOUR_REGION:YOUR_INSTANCE_ID"
        - name: DB_PORT
          value: "5432" # This is ignored when using a Unix socket but good to have.
        - name: DB_USER
          value: "postgres" # Or your staging DB user
        - name: DB_NAME
          value: "messaging_service" # Or your staging DB name
        - name: DB_SSL_MODE
          value: "disable" # SSL is not needed for the socket connection.
        - name: REDIS_ENABLED
          value: "false"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              key: latest
              name: it-chatbot-jwt-password
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: latest
              name: it-chatbot-db-password

        resources:
          limits:
            cpu: "1"
            memory: "512Mi"
          requests:
            cpu: "0.5"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/ready
            port: 8080
          periodSeconds: 5